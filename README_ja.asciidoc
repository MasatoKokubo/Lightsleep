= Lightsleep

link:README.asciidoc[English]

Lightsleepは、軽量のO/Rマッピング･ライブラリで、Java 8以降で利用できます。

=== [small]#特徴#

- Java 8で追加された機能(関数型インタフェース、Optionalクラス)を使用したAPI 。
- SQLの構築で使用するメソッド名がSQLの予約語と同じため、直観的に理解しやすい。
- J2EEが不要(Java RuntimeとJDBCドライバー以外に依存するライブラリがない)なため、適用範囲が広い。
- XMLファイル等によるテーブルとJavaクラスとのマッピング用の定義ファイルは不要。
- ライブラリがコンパクトなため学習が容易。
- 各種のDBMSに同時に接続可能。
- 各種のコネクション･プール･ライブラリを同時に使用可能。
- 内部ログを各種のロギング･ライブラリから選択して出力可能。

=== [small]##対応##DBMS

- Db2
- MariaDB
- MySQL
- Oracle Database
- PostgreSQL
- SQLite
- Microsoft SQL Server
- 標準SQL準拠DBMS

==== build.gradle[small]##での依存関係の記述例##

[source,groovy]
.build.gradle
----
repositories {
    jcenter()
}

dependencies {
    compile 'org.lightsleep:lightsleep:4.0.0'
}
----

=== Lightsleep[small]##で使用するエンティティ･クラスの定義例##

[source,java]
.Contact.java
----
package org.lightsleep.example.java.entity;
import java.sql.Date;
import java.sql.Timestamp;
import org.lightsleep.entity.*;

public class Contact {
    @Key
    public int       id;
    public String    lastName;
    public String    firstName;
    public LocalDate birthday;

    @Insert("0") @Update("{updateCount}+1")
    public int updateCount;

    @Insert("CURRENT_TIMESTAMP") @NonUpdate
    public LocalDateTime createdTime;

    @Insert("CURRENT_TIMESTAMP") @Update("CURRENT_TIMESTAMP")
    public LocalDateTime updatedTime;
}
----

[source,groovy]
.Contact.groovy
----
package org.lightsleep.example.groovy.entity
import java.sql.Date
import java.sql.Timestamp
import org.lightsleep.entity.*

class Contact {
    @Key
    int       id
    String    firstName
    String    lastName
    LocalDate birthday

    @Insert('0') @Update('{updateCount}+1')
    int updateCount

    @Insert('CURRENT_TIMESTAMP') @NonUpdate
    LocalDateTime createdTime

    @Insert('CURRENT_TIMESTAMP') @Update('CURRENT_TIMESTAMP')
    LocalDateTime updatedTime
}
----

=== Lightsleep[small]##の使用例##

[source,java]
.Java[small]##での使用例##
----
var contacts = new ArrayList<Contact>();
Transaction.execute(conn ->
    new Sql<>(Contact.class)
        .where("{lastName}={}", "Apple")
        .or   ("{lastName}={}", "Orange")
        .orderBy("{lastName}")
        .orderBy("{firstName}")
        .connection(conn)
        .select(contacts::add)
);
----

[source,groovy]
.Groovy[small]##での使用例##
----
List<Contact> contacts = []
Transaction.execute {
    new Sql<>(Contact)
        .where('{lastName}={}', 'Apple')
        .or   ('{lastName}={}', 'Orange')
        .orderBy('{lastName}')
        .orderBy('{firstName}')
        .connection(it)
        .select({contacts << it})
}
----

[source,sql]
.[small]##生成される##SQL
----
SELECT id, firstName, lastName, birthday, updateCount, createdTime, updatedTime
  FROM Contact
  WHERE lastName='Apple' OR lastName='Orange'
  ORDER BY lastName ASC, firstName ASC
----

=== [small]#ライセンス#

The MIT License (MIT)

[gray]#_(C) 2015 Masato Kokubo ([small]##小久保 雅人##)_#

=== [small]#ドキュメント#

link:ReleaseNotes_ja.asciidoc[[small]#リリース･ノート#]

link:Tutorial_ja.asciidoc[[small]#チュートリアル#]

link:UserGuide_ja.asciidoc[[small]#ユーザー･ガイド#]

http://masatokokubo.github.io/Lightsleep-java/javadoc_ja/index.html[API仕様]

=== Qiita[small]##記事##

http://qiita.com/MasatoKokubo/items/ab46696b203d7f67036c[Java RuntimeとJDBCドライバーだけで動作するO/Rマッピング･ライブラリLightsleepの紹介]

http://qiita.com/MasatoKokubo/items/1080d1277e2b51d88f89[Java 8用O/Rマッピング･ライブラリLightsleepの柔軟なデータ型変換の仕組み]
