// (C) 2016 Masato Kokubo
plugins {
	id 'com.jfrog.bintray' version '1.8.4'
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'java-library'
apply plugin: 'groovy'

repositories {
	jcenter()

	maven {
		// db2jcc4
		url 'https://artifacts.alfresco.com/nexus/content/repositories/public/'
	}
}

dependencies {
	compileOnly        'log4j:log4j:1.+'
	testRuntimeOnly    'log4j:log4j:1.+'
	compileOnly        'org.apache.logging.log4j:log4j-api:2.+'
	testRuntimeOnly    'org.apache.logging.log4j:log4j-core:2.+'
	compileOnly        'org.slf4j:slf4j-api:1.7.+'
	testRuntimeOnly    'ch.qos.logback:logback-classic:1.2.+'

	compileOnly        'com.mchange:c3p0:0.+'
	testRuntimeOnly    'com.mchange:c3p0:0.+'
	compileOnly        'com.zaxxer:HikariCP:3.+'
	testRuntimeOnly    'com.zaxxer:HikariCP:3.+'
	compileOnly        'org.apache.commons:commons-dbcp2:2.+'
	testRuntimeOnly    'org.apache.commons:commons-dbcp2:2.+'
	compileOnly        'org.apache.tomcat:tomcat-jdbc:9.+'
	testRuntimeOnly    'org.apache.tomcat:tomcat-jdbc:9.+'

	testRuntimeOnly    'com.ibm.db2.jcc:db2jcc4:10.+'
	testRuntimeOnly    'mysql:mysql-connector-java:8.+'
	compileOnly        files('C:/Java/jdbc/ojdbc8_g.jar')
	testRuntimeOnly    files('C:/Java/jdbc/ojdbc8_g.jar')
	testRuntimeOnly    'org.postgresql:postgresql:42.+'
	testRuntimeOnly    'org.xerial:sqlite-jdbc:3.+'
	compileOnly        'com.microsoft.sqlserver:mssql-jdbc:7.0.0.jre8'
	testRuntimeOnly    'com.microsoft.sqlserver:mssql-jdbc:7.0.0.jre8'

	testRuntimeOnly    'junit:junit:4.+'
	testImplementation 'org.codehaus.groovy:groovy-all:2.5.+'
	testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4'

	testRuntimeOnly    'tomcat:naming-java:5.+'
	testRuntimeOnly    'tomcat:naming-factory:5.+'
	testRuntimeOnly    'tomcat:naming-resources:5.+'

	compileOnly        'org.debugtrace:debugtrace:2.+'
	testCompile        'org.debugtrace:debugtrace:2.+'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group               = 'org.lightsleep'
archivesBaseName    = 'lightsleep'
version             = '3.0.0'

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
	test {
		groovy {
			srcDir 'src/test/groovy'
		}
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
	example {
		java {
			srcDir 'src/example/java'
		}
		resources {
			srcDir 'src/example/resources'
		}
		compileClasspath += main.output
		runtimeClasspath += main.output
		runtimeClasspath += sourceSets.test.runtimeClasspath
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.10.2'
}

compileJava {
	options.encoding     = 'UTF-8'
	options.deprecation  = true
	options.debug        = true
	options.compilerArgs = ['-Xlint']
}

compileTestJava {
	options.encoding     = compileJava.options.encoding
	options.deprecation  = compileJava.options.deprecation
	options.debug        = compileJava.options.debug
	options.compilerArgs = compileJava.options.compilerArgs
}

task compileJava_ja(type:JavaCompile) {
	options.encoding     = compileJava.options.encoding
	options.deprecation  = compileJava.options.deprecation
	options.debug        = compileJava.options.debug
	options.compilerArgs = compileJava.options.compilerArgs

	classpath      = compileJava.classpath
	source         = files('src/main_ja/java')
	destinationDir = file('build/classes/main_ja')
}

jar {
	manifest {
		attributes	'Implementation-Title'    : project.name,
					'Implementation-Version'  : version,
					'Implementation-Vendor'   : 'Masato Kokubo',
					'Implementation-Vendor-Id': 'jp.masatokokubo'
	}
}

javadoc {
	title               = "$project.name $version API Specification"
	options.charSet     = 'UTF-8'
	options.encoding    = 'UTF-8'
	options.locale      = 'en'
	options.windowTitle = "$project.name"
	options.overview    = 'src/main/java/overview.html'
	options.addBooleanOption('author', true)
	options.addStringOption ('bottom', '<div class="copyright">&copy; 2016 Masato Kokubo</div>')
}

javadoc.doFirst {
	def cssFile = file('build/docs/javadoc/stylesheet.css')
	if (cssFile.exists())
		cssFile.delete()
}

javadoc.doLast {
	def cssFile = file('build/docs/javadoc/stylesheet.css')
	file('src/main/java/addtional.css').eachLine {
		cssFile.append("$it\n")
	}
}

task javadoc_ja(type:Javadoc) {
	dependsOn = ['compileJava_ja']

	title               = "$project.name $version API Specification"
	options.charSet     = javadoc.options.charSet
	options.encoding    = javadoc.options.encoding
	options.locale      = 'ja'
	options.windowTitle = javadoc.options.windowTitle
	options.overview    = 'src/main/java/overview_ja.html'
	options.addBooleanOption('author', true)
	options.addStringOption ('bottom', '<div class="copyright">&copy; 2016 Masato Kokubo</div>')

	classpath      = javadoc.classpath
	source         = fileTree('src/main_ja/java').include('**/*.java')
	destinationDir = file('build/docs/javadoc_ja')
}

javadoc_ja.doFirst {
	def cssFile = file('build/docs/javadoc_ja/stylesheet.css')
	if (cssFile.exists())
		cssFile.delete()
}

javadoc_ja.doLast {
	def cssFile = file('build/docs/javadoc_ja/stylesheet.css')
	file('src/main/java/addtional_ja.css').eachLine {
		cssFile.append("$it\n")
	}
}

task copyImages(type: Copy) {
	from 'images'
	into 'build/docs/images'
	include '**/*.gif'
}

build.dependsOn javadoc_ja, copyImages

task zip(type: Zip) {
	classifier = 'bin'

	into('/'         , {from "build/libs/${archivesBaseName}-${version}.jar"})
	into('/'         , {from 'LICENSE.txt'})
	into('/'         , {from 'README.asciidoc', 'ReleaseNotes.asciidoc', 'Tutorial.asciidoc', 'UserGuide.asciidoc'})
	into('/'         , {from 'README_ja.asciidoc', 'ReleaseNotes_ja.asciidoc', 'Tutorial_ja.asciidoc', 'UserGuide_ja.asciidoc'})
	into('javadoc'   , {from 'build/docs/javadoc'})
	into('javadoc_ja', {from 'build/docs/javadoc_ja'})
}

task sourcesJar(type: Jar) {
	classifier = 'sources'

	manifest {
		attributes	'Implementation-Title'    : project.name,
					'Implementation-Version'  : version,
					'Implementation-Vendor'   : 'Masato Kokubo',
					'Implementation-Vendor-Id': 'jp.masatokokubo'
	}

	into('/org', {from 'src/main/java/org'})
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		mavenPublication(MavenPublication) {
//			from components.java
			groupId    group
			artifactId archivesBaseName
			version    version
		}
	}
}

bintray {
	user = project.hasProperty('bintray_user') ? bintray_user : ''
	key  = project.hasProperty('bintray_api_key') ? bintray_api_key : ''
	configurations = ['archives']
	publications   = ['mavenPublication']

//	dryRun = true

	pkg {
		repo            = 'maven'
		name            = 'Lightsleep'
		websiteUrl      = 'https://github.com/MasatoKokubo/Lightsleep-java'
		issueTrackerUrl = 'https://github.com/MasatoKokubo/Lightsleep-java/issues'
		vcsUrl          = 'https://github.com/MasatoKokubo/Lightsleep-java.git'
		licenses        = ['MIT']
		version {
			name           = project.version
			released       = new Date()
			vcsTag         = project.version
			gpg {
				sign       = true
				passphrase = project.hasProperty('bintray_gpg_password') ? bintray_gpg_password : ''
			}
		}
	}
}
