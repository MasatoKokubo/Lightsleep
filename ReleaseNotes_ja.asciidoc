= Lightsleep [small]#リリース･ノート#

link:ReleaseNotes.asciidoc[English]

[[TOC_]]
=== 目次

- <<ReleaseNote3.2.0,[small]#バージョン# 3.2.0 [small]#- 2019-09-23#>>
- <<ReleaseNote3.1.1,[small]#バージョン# 3.1.1 [small]#- 2019-07-18#>>
- <<ReleaseNote3.1.0,[small]#バージョン# 3.1.0 [small]#- 2019-07-16#>>
- <<ReleaseNote3.0.1,[small]#バージョン# 3.0.1 [small]#- 2018-12-01#>>
- <<ReleaseNote3.0.0,[small]#バージョン# 3.0.0 [small]#- 2018-10-07#>>
- <<ReleaseNote2.2.1,[small]#バージョン# 2.2.1 [small]#- 2018-02-12#>>
- <<ReleaseNote2.2.0,[small]#バージョン# 2.2.0 [small]#- 2018-02-04#>>
- <<ReleaseNote2.1.1,[small]#バージョン# 2.1.1 [small]#- 2017-12-03#>>
- <<ReleaseNote2.1.0,[small]#バージョン# 2.1.0 [small]#- 2017-11-12#>>
- <<ReleaseNote2.0.0,[small]#バージョン# 2.0.0 [small]#- 2017-09-09#>>

[[ReleaseNote3.2.0]]

=== [small]#バージョン# 3.2.0

1. ** 追加したインタフェース **
  * `org.lightsleep.entity.**PostDelete**`
  * `org.lightsleep.entity.**PostInsert**`
  * `org.lightsleep.entity.**PostSelect**`
  * `org.lightsleep.entity.**PostUpdate**`
  * `org.lightsleep.entity.**PreDelete**`
  * `org.lightsleep.entity.**PreUpdate**`

1. ** 追加したクラス **
  * `org.lightsleep.database.**MariaDB**`
  * `org.lightsleep.database.anchor.**mariadb**`

1. ** 仕様変更 **
  * `org.lightsleep.entity.**PreInsert**` インタフェースの `**preInsert**` メソッドの戻り値型を `**int**`  から `**void**` に変更しました。
  * `org.lightsleep.entity.**Composite**` インタフェースの `**postInsert**`,  `**postUpdate**` および `**postDelete**` メソッドの戻り値型を `**int**`  から `**void**` に変更しました。
  * `org.lightsleep.database.**DB2**` クラスを `**Db2**` に変更しました。

1. ** 非推奨にしたインタフェース **
  * `org.lightsleep.entity.**Composite**`
  * `org.lightsleep.entity.**PostLoad**`
  * `org.lightsleep.entity.**PreStore**`

[[ReleaseNote3.1.1]]

=== [small]#バージョン# 3.1.1

1. **バグ修正**
  * サブクエリ条件からメインテーブルに結合しているテーブルのカラム名が参照できない。

[[ReleaseNote3.1.0]]

=== [small]#バージョン# 3.1.0

1. **機能追加**
  * **FROM句** に **サブクエリ** を使用したSELECT SQLの生成
  * **UNION SQL**の生成

1. **仕様変更**
  * `Sql#columns(String ...)` メソッドを複数回呼び出した場合の仕様を変更しました。 +
    **本バージョンより前:** 引数のカラム配列が累積される。 +
    **本バージョン:** 引数のカラム配列に置き換えられる。

1. **追加したメソッド**
  * `org.lightsleep.**Sql**` クラス
    ** `Sql<E> **columns**(Collection<String> propertyNames)`
    ** `<RE> Sql<E> **columns**(Class<RE> resultClass)`
    ** `Sql<E> **from**(Sql<?> fromSql)`
    ** `Sql<?> **getFrom**()`
    ** `<SE> Sql<E> **where**(Sql<SE> subSql, String content)`
    ** `<SE> Sql<E> **and**(Sql<SE> subSql, String content)`
    ** `<SE> Sql<E> **or**(Sql<SE> subSql, String content)`
    ** `<SE> Sql<E> **having**(Sql<SE> subSql, String content)`
    ** `<UE> Sql<E> **union**(Sql<UE> unionSql)`
    ** `<UE> Sql<E> **unionAll**(Sql<UE> unionSql)`
    ** `List<Sql<?>> **getUnionSqls**()`
    ** `boolean **isUnionAll**()`

  * `org.lightsleep.**Condition**` インターフェース
    ** `static <E, SE> Condition **of**(Sql<E> outerSql, Sql<SE> subSql, String content)`
    ** `default <K> Condition **and**(K entity)`
    ** `default <E, SE> Condition **and**(Sql<E> outerSql, Sql<SE> subSql, String content)`
    ** `default <K> Condition **or**(K entity)`
    ** `default <E, SE> Condition **or**(Sql<E> outerSql, Sql<SE> subSql, String content)`

  * `org.lightsleep.**SubqueryCondition**` クラス
    ** `<E> **SubqueryCondition**(Sql<E> outerSql, Sql<SE> subSql, Expression expression)`

1. **非推奨にしたメソッド**
  * `org.lightsleep.**Sql**` クラス
    ** `**setColumns**(Set<String> propertyNames)`
    ** `**setColumns**(Class<?> resultClass)`

[[ReleaseNote3.0.1]]

=== [small]#バージョン# 3.0.1

1. **変更**
  * `SQLServer` データベース･ハンドラを使用した場合、`U+0080` 以上の文字コードを含む文字列リテラルは、`N` プレフィックス付き(例 `N'漢字'`)で生成するようにしました。
  * `SQLite` データベース･ハンドラを使用した場合、`byte[]` のリテラルは、`X'hhhhhh'` 形式で生成するようにしました。(配列長が `maxBinaryLiteralLength` を超えない場合)

[[ReleaseNote3.0.0]]

=== [small]#バージョン# 3.0.0

1. **改善**
  * 以下のデータ型をサポートしました。エンティティクラスのフィールド型として使用できます。
    ** `java.time.LocalDate`
    ** `java.time.LocalTime`
    ** `java.time.LocalDateTime`
    ** `java.time.OffsetDateTime`
    ** `java.time.ZonedDateTime`
    ** `java.time.Instant`

1. **追加したメソッドおよびコンストラクタ**
  * `org.lightsleep.**Sql**` クラス
    ** `**doNotIf**(boolean condition, Consumer<Sql<E>> action)`
    ** `**doElse**(Consumer<Sql<E>> elseAction)`
    ** `**executeUpdate**(String sql)`

  * `org.lightsleep.database.**Database**` インタフェースおよびこれをインプリメントしているクラス
    ** `**getObject**(Connection connection, ResultSet resultSet, String columnLabel)`

  * `org.lightsleep.helper.ConvertException` クラス
    ** `**ConvertException**(Class<?> sourceType, Object source, Class<?> destinType, Throwable cause)`

  * `org.lightsleep.helper.TypeConverter` クラス
    ** `**TypeConverter**(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, MT> function1, Function<? super MT, ? extends DT> function2)`
    ** `**TypeConverter**(Class<ST> sourceType, Class<DT> destinType,Function<? super ST, ? extends MT1> function1, Function<? super MT1, ? extends MT2> function2, Function<? super MT2, ? extends DT> function3)`
    ** `**TypeConverter**(Class<ST> sourceType, Class<DT> destinType, Function<? super ST, MT1> function1, Function<? super MT1, ? extends MT2> function2, Function<? super MT2, ? extends MT3> function3, Function<? super MT3, ? extends DT> function4)`

1. **非推奨にしたメソッド**
  * `org.lightsleep.**Sql**` クラス
    ** `**doIf**(boolean condition, Consumer<Sql<E>> action, Consumer<Sql<E>> elseAction)`

1. **削除**したメソッドおよびコンストラクタ
  * `org.lightsleep.**Sql**` クラス

    ** `**select**(ConnectionWrapper connection, Consumer<? super E> consumer)`
    ** `**select**(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1)`
    ** `**select**(ConnectionWrapper connection, Consumer<? super  E > consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2)`
    ** `**select**(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3)`
    ** `**select**(ConnectionWrapper connection, Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3, Consumer<? super JE4> consumer4)`
    ** `**select**(ConnectionWrapper connection)`
    ** `**selectCount**(ConnectionWrapper connection)`
    ** `**insert**(ConnectionWrapper connection, E entity)`
    ** `**insert**(ConnectionWrapper connection, Iterable<? extends E> entities)`
    ** `**update**(ConnectionWrapper connection, E entity)`
    ** `**update**(ConnectionWrapper connection, Iterable<? extends E> entities)`
    ** `**delete**(ConnectionWrapper connection)`
    ** `**delete**(ConnectionWrapper connection, E entity)`
    ** `**delete**(ConnectionWrapper connection, Iterable<? extends E> entities)`

  * `org.lightsleep.database.**DB2**`, `**MySQL**`, `**Oracle**`, `**PostgreSQL**`, `**SQLite**`, `**SQLServer**`, `**Standard**` クラス
    ** `instance()`

  * `org.lightsleep.helper.TypeConverter` クラス
    ** `**TypeConverter**(TypeConverter<ST, MT> typeConverter1, TypeConverter<MT, DT> typeConverter2)`

<<TOC_,目次へ>>

[[ReleaseNote2.2.1]]

=== [small]#バージョン# 2.2.1

1. **バグ修正**
  * [修正済] OracleのJDBCドライバjarがクラスパスにないと動作しない。

<<TOC_,目次へ>>

[[ReleaseNote2.2.0]]

=== [small]#バージョン# 2.2.0

1. **改善**
  * SQLのログに接続先のJDBC URLを含めるオプションを *追加* しました。 +
    使用例:::
    `lightsleep.properties` ファイルに以下を追加 +
    `connectionLogFormat = [{0}/{1}/{2}]`

  * ログのパスワード部分を `"xxxx"` でマスクするようにしました。

1. `Database` インタフェースおよびその実装クラスに `maskPassword` メソッドを *追加* しました。

<<TOC_,目次へ>>

[[ReleaseNote2.1.1]]

=== [small]#バージョン# 2.1.1

1. **バグ修正**
  * [修正済] コネクション･サプライヤが `Jndi` の場合に常に `Standard` データベース･ハンドラが選択される。

1. **その他**
  * ログメッセージの改善

<<TOC_,目次へ>>

[[ReleaseNote2.1.0]]

=== [small]#バージョン# 2.1.0

バージョン番号はマイナー･リリースですが、**仕様変更があります**。

1. `lightsleep.properties` ファイルに、複数のJDBC URLの定義を **可能** にしました。

1. JDBC URLに対応するデータベース･ハンドラ･クラス **は自動的に判断** するようにしました。これに伴い `lightsleep.properties` ファイルの `Database` プロパティを **無効** にしました。**(仕様変更)**

1. 以下のメソッド/コンストラクタを **追加** しました。
  * `Sql` クラス
    ** `public ConnectionWrapper getConnection()`

  * `org.lightsleep.connection.ConnectionSupplier` インタフェース
    ** `Database getDatabase()`
    ** `DataSource getDataSource()`
    ** `String getUrl()`
    ** `static ConnectionSupplier of(String supplierName, Properties properties)`
    ** `static ConnectionSupplier find(String... urlWords)`

  * `org.lightsleep.connection.AbstractConnectionSupplier` 抽象クラス
    ** `protected AbstractConnectionSupplier(Properties properties, Consumer<Properties> modifier)`
    ** `@Override public Database getDatabase()`
    ** `@Override public String getUrl()`
    ** `@Override public String toString()`

  * `org.lightsleep.database.Database` インタフェース
    ** `static Database getInstance(String jdbcUrl)`

  * `org.lightsleep.helper.Resource` クラス
      * `public static Resource getGlobal()`

1. `org.lightsleep.Sql` クラスの以下のメソッドを **削除** しました。**(仕様変更)**
  * `public static Database getDatabase()`
  * `public static void setDatabase(Database database)`
  * `public static ConnectionSupplier getConnectionSupplier()`
  * `public static void setConnectionSupplier(ConnectionSupplier supplier)`

1. `org.lightsleep.connection.ConnectionWrapper` クラスを追加し、各メソッドの引数の型を `java.sql.Connection` から `ConnectionWrapper` に**変更**しました。**(仕様変更)**

1. `org.lightsleep.connection` パッケージの各クラスに `Properties properties` を引数とするコンストラクタを**追加**しました。

1. `org.lightsleep.database.anchor` パッケージと `db2`, `mysql`, `oracle`, `postgresql`, `sqlite`, `sqlserver` クラスを **追加** しました。これらのクラスは、JDBC URLから対応するデータベース･ハンドラ･クラスを見つける際に使用されます。

1. `org.lightsleep.database` パッケージの各クラスの `instance()` メソッドを **非推奨** にし、`instance` 静的変数を **追加** しました。

<<TOC_,目次へ>>

[[ReleaseNote2.0.0]]

=== [small]#バージョン# 2.0.0

1. `org.lightsleep.Sql` クラスの型パラメータとは異なるエンティティ型でSELECT SQLの結果を取得する以下のメソッドを**追加**しました。
  * `public <R> Optional<R> selectAs(Class<R> resultClass)`
  * `public <R> void selectAs(Class<R> resultClass, Consumer<? super R> consumer)`

1. `org.lightsleep.Sql` クラスの `Connection` 引数を持つメソッドを**非推奨**にし、`Connection` 引数がない以下のメソッドを**追加**しました。
  * `public void select(Consumer<? super E> consumer)`
  * `public <JE1> void select(Consumer<? super E> consumer, Consumer<? super JE1> consumer1)`
  * `public <JE1, JE2> void select(Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2)`
  * `public <JE1, JE2, JE3> void select(Consumer<? super  E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3)`
  * `public <JE1, JE2, JE3, JE4> void select(Consumer<? super E> consumer, Consumer<? super JE1> consumer1, Consumer<? super JE2> consumer2, Consumer<? super JE3> consumer3, Consumer<? super JE4> consumer4)`
  * `public Optional<E> select()`
  * `public int selectCount()`
  * `public int insert(E entity)`
  * `public int insert(Iterable<? extends E> entities)`
  * `public int update(E entity)`
  * `public int update(Iterable<? extends E> entities)`
  * `public int delete()`
  * `public int delete(E entity)`
  * `public int delete(Iterable<? extends E> entities)`

1. `org.lightsleep.Sql` クラスに以下のメソッドを**追加**しました。
  * `public Sql<E> connection(Connection connection)`
  * `public <R> Sql<E> setColumns(Class<R> resultClass)`
  * `public Sql<E> doAlways(Consumer<Sql<E>> action)`

1. `org.lightsleep.Sql` クラスが `Cloneable` インタフェースを **実装** するようにしました。

1. `org.lightsleep.Sql` クラスの `where` メソッドの引数の仕様を **変更** しました。**(仕様変更)**
```
public Sql<E> where(E entity)  
    ↓
public <K> Sql<E> where(K entity)  
```

1. `Table` アノテーション･クラスに付与されていた `@Inherited` を **削除** しました。**(仕様変更)**

1. `Key`, `NonColumn`, `NonInsert`, `NonSelect`, `NonUpdate` アノテーション･クラスに `value` プロパティを**追加**しました。

1. `NonColumnProperty`, `NonInsertProperty`, `NonSelectProperty`, `NonUpdateProperty` アノテーション･クラスに `property` プロパティを**追加**し、`value` プロパティの仕様を**変更**しました。**(仕様変更)**

1. `org.lightsleep.component.Expression` クラスの `toString` において、内容文字列の `{}` と引数の数が不一致の際にスローする例外を `IllegalArgumentException` から `MissingArgumentsException`(新規追加)に**変更**にしました。**(仕様変更)**

1. `org.lightsleep.helper.Accessor` クラスの `getField`, `getValue`, `setValue` メソッドでスローする例外を `IllegalArgumentException` から `MissingPropertyException`(新規追加)に**変更**にしました。**(仕様変更)**

<<TOC_,目次へ>>

[gray]#_(C) 2016 Masato Kokubo_#
